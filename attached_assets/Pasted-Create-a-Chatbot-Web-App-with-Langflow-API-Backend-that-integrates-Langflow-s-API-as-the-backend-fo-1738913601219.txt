Create a Chatbot Web App with Langflow API Backend, that integrates Langflow's API as the backend for a chatbot. The app should include the following features:

- User Authentication with email.
- Chat History: Allow users to view and manage their chat history.
- Langflow API Integration

**LangflowClient Class (Refactored for Readability and Maintainability)**

```javascript
class LangflowClient {
    constructor(baseURL, applicationToken) {
        this.baseURL = baseURL;
        this.applicationToken = applicationToken;
    }

    async post(endpoint, body, headers = { "Content-Type": "application/json" }) {
        headers["Authorization"] = `Bearer ${this.applicationToken}`;
        const url = `${this.baseURL}${endpoint}`;
        
        try {
            const response = await fetch(url, {
                method: 'POST',
                headers: headers,
                body: JSON.stringify(body),
            });
            const responseMessage = await response.json();
            if (!response.ok) throw new Error(`${response.status} ${response.statusText} - ${JSON.stringify(responseMessage)}`);
            return responseMessage;
        } catch (error) {
            console.error('Request Error:', error.message);
            throw error;
        }
    }

    async initiateSession(flowId, langflowId, inputValue, inputType = 'chat', outputType = 'chat', stream = false, tweaks = {}) {
        const endpoint = `/lf/${langflowId}/api/v1/run/${flowId}?stream=${stream}`;
        return this.post(endpoint, { input_value: inputValue, input_type: inputType, output_type: outputType, tweaks: tweaks });
    }

    handleStream(streamUrl, onUpdate, onClose, onError) {
        const eventSource = new EventSource(streamUrl);
        eventSource.onmessage = event => {
            const data = JSON.parse(event.data);
            onUpdate(data);
        };
        eventSource.onerror = event => {
            console.error('Stream Error:', event);
            onError(event);
            eventSource.close();
        };
        eventSource.addEventListener("close", () => {
            onClose('Stream closed');
            eventSource.close();
        });
        return eventSource;
    }

    async runFlow(flowIdOrName, langflowId, inputValue, inputType = 'chat', outputType = 'chat', tweaks = {}, stream = false, onUpdate, onClose, onError) {
        try {
            const initResponse = await this.initiateSession(flowIdOrName, langflowId, inputValue, inputType, outputType, stream, tweaks);
            if (stream && initResponse?.outputs?.[0]?.outputs?.[0]?.artifacts?.stream_url) {
                const streamUrl = initResponse.outputs[0].outputs[0].artifacts.stream_url;
                this.handleStream(streamUrl, onUpdate, onClose, onError);
            }
            return initResponse;
        } catch (error) {
            console.error('Error running flow:', error);
            onError('Error initiating session');
        }
    }
}
```

---

**Main Function for Running Langflow**

```javascript
async function main(inputValue, inputType = 'chat', outputType = 'chat', stream = false) {
    const flowIdOrName = 'edf93eff-1384-4865-bc9e-b7bbcbd9ed1a';  // Example flow ID
    const langflowId = '2e964804-1fee-4340-bb22-099f1e785ec1';    // Example Langflow ID
    const applicationToken = '<YOUR_APPLICATION_TOKEN>';          // Replace with actual token
    const langflowClient = new LangflowClient('https://api.langflow.astra.datastax.com', applicationToken);

    const tweaks = {
        "ChatInput-ggtgE": {
            "sender": "User",
            "session_id": "",
            "should_store_message": true,
        },
        "ChatOutput-1iThM": {
            "sender": "Machine",
            "session_id": "",
            "should_store_message": true,
        },
        "Prompt-zEGAw": {
            "memory": "",
            "template": "You are 桜AI. You assist users with inquiries in Japanese, primarily regarding the services of パシフィックコンサルタンツ株式会社 (Pacific Consultants Co., Ltd.).",
        },
        // Include more tweak parameters as necessary
    };

    try {
        const response = await langflowClient.runFlow(
            flowIdOrName,
            langflowId,
            inputValue,
            inputType,
            outputType,
            tweaks,
            stream,
            (data) => console.log("Received:", data.chunk),  // onUpdate
            (message) => console.log("Stream Closed:", message),  // onClose
            (error) => console.log("Stream Error:", error)  // onError
        );

        if (!stream && response?.outputs) {
            const flowOutputs = response.outputs[0];
            const output = flowOutputs.outputs[0].outputs.message;
            console.log("Final Output:", output.message.text);
        }
    } catch (error) {
        console.error('Main Error:', error.message);
    }
}
```